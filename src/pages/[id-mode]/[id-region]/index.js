// © 2024 - 2025 Fraunhofer-Gesellschaft e.V., München
//
// SPDX-License-Identifier: AGPL-3.0-or-later

import React from 'react';
import router from 'next/router';
import BuildTime from '../../../server/build-time';
import Indicators from '../../../sections/indicators/indicators';

export class Index extends React.Component {
  render() {
    // This method defines a next.js page component for a certain route.
    // The route is derived from our file path structure "pages/[id_region]/[id_action_type]/index.js".
    // Next.js generates static properties "props" at build time and we pass them
    // on as context for a react.js component (also adding the router).
    return <Indicators {...this.props} ></Indicators>;
  }

  static _generatePaths(properties){
    const paths = [];
    const modes = properties.modes.rows;
    const regions = properties.regions.rows;
    for (const mode of modes){
      const idMode = mode[0];
      for (const region of regions){
        const idRegion = region[0];
        const path = {
          params: {
            'id-mode': '' + idMode,
            'id-region': '' + idRegion
          }
        };
        paths.push(path);
      }
    }
    return paths;
  }

  static _extractRouteParametersFromContextAndAppendToProperties(properties, context){
    const { params } = context;
    properties.idMode = Number.parseInt(params['id-mode']);
    properties.idRegion = Number.parseInt(params['id-region']);
    return properties;
  }
}
export default router.withRouter(Index); // creates attribute props.router

export async function getStaticPaths() {
  // This method determines with variations of routes/paths are statically generated by next.js.
  // For example "/1/2" for id_region = 1 and id_action_type = 2
  // This method is called using server-side nodejs during build time.
  //
  // Also see https://nextjs.org/docs/basic-features/data-fetching/get-static-paths
  // console.log('next.js - getStaticPaths');
  const buildTime = BuildTime.instance();
  let properties;
  try {
    properties = await buildTime.readPropertiesFromDatabase();
  } catch(error){
    const message = 'Could not read parameter space while building next.js app.';
    console.error(message);
    throw error;
  }

  const paths = Index._generatePaths(properties);
  // console.log(paths)
  return {
    paths,
    fallback: false // false or 'blocking'
  };
}

export async function getStaticProps(context) {
  // For each variation of route/path, this method is called to prepare
  // static properties with next.js, that are going to be passed as "props" argument
  // to the page component function. The page component is build using react.js.
  // This method is called using server-side nodejs during build time.
  //
  // Also see https://nextjs.org/docs/basic-features/data-fetching/get-static-props
  // console.log('next.js - getStaticProps');
  const buildTime = BuildTime.instance();
  let properties;
  try {
    properties = await buildTime.readPropertiesFromDatabase();
  } catch(error){
    const message = 'Could not read parameter space while building next.js app.';
    console.error(message);
    throw error;
  }
  properties = Index._extractRouteParametersFromContextAndAppendToProperties(properties, context);

  return {
    props: properties
  };
}
